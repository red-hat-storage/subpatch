#!/usr/bin/python

from glob import glob
import logging
import os
import re
import subprocess
import sys
import tempfile
import shutil

PY2 = sys.version_info[0] == 2
if PY2:
    from ConfigParser import ConfigParser
    from StringIO import StringIO
else:
    from configparser import ConfigParser
    from io import StringIO


logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
log = logging.getLogger()


def git(*args, **kwargs):
    """ Run a git shell command, optionally returning the output """
    args = ('git',) + args
    log.info('+ ' + ' '.join(args))
    output = subprocess.check_output(args, **kwargs)
    if PY2:
        return output
    else:
        return output.decode('utf-8')


def find_url(gitmodules, directory):
    lines = [line.strip() for line in gitmodules.split("\n")]
    contents = "\n".join(lines)
    fp = StringIO(contents)
    config = ConfigParser()
    config.readfp(fp)
    section = 'submodule "%s"' % directory
    url = config.get(section, 'url')
    return url


def new_submodule(directory, parent_commit, rng):
    """
    :param str directory: submodule location
    :param str parent_commit: parent commit that has the new submodule.
    :param str rng: range for this submodule. Starts with "000000"
    """
    log.warning('new submodule!')
    gitmodules = git('show', parent_commit + ':.gitmodules')

    url = find_url(gitmodules, directory)

    tmpdir = tempfile.mkdtemp(suffix='.subpatch')
    git('clone', '--bare', url, tmpdir)

    # "sha" is the commit to use for this submodule
    _, sha = rng.split('..')
    name = os.path.basename(directory)

    # create a tarball
    filename = '%s-%s.tar.gz' % (name, sha)
    git('archive',
        '--prefix=%s/' % directory,
        '--output=%s' % filename,
        sha,
        cwd=tmpdir)
    # move it to the current working directory
    path = os.path.join(tmpdir, filename)
    log.info('created %s' % path)

    shutil.move(path, filename)

    print('')
    print('Insert the following lines into your .spec file:')
    print('')
    print('With the other "SourceX" lines:')
    print('')
    print('Source100: %s' % filename)

    print('')
    print('...and in the %prep section of your .spec file:')
    print('')
    print('# %s submodule:' % name)
    print('tar xzf %{SOURCE100}')

    shutil.rmtree(tmpdir)


def main(argv):
    try:
        parent_range = argv[1]
    except IndexError:
        raise SystemExit('specify a Git range to diff')

    changes = set()
    for line in git('diff', '--submodule=log', parent_range).split("\n"):
        if line.startswith('Submodule '):
            changes.add(line)

    # Example values for changes:
    #   Submodule src/civetweb 8d27131...47e4be1 (not checked out)
    #   Submodule src/civetweb 8d27131..47e4be1:
    #   Submodule src/spawn 0000000000...5f4742f647 (new submodule)

    if len(changes) == 0:
        raise SystemExit('no submodule changes found')

    log.info('Found these submodule changes:')
    log.info("\n".join(changes))

    if len(changes) > 1:
        raise SystemExit('cannot handle more than one submodule change')

    change = next(iter(changes))
    m = re.match(r'Submodule (\S+) (\S+)(?: \((.+)\))?', change)
    if not m:
        raise RuntimeError('error parsing change output "%s"' % change)
    directory = m.group(1)
    rng = m.group(2)

    if rng.endswith(':'):
        rng = rng[:-1]

    # format-patch will generate uneeded patches if we use the triple-dot
    # "..." range. Switch to using the double-dot ".." range.
    rng = rng.replace('...', '..')

    log.info('range %s in directory %s' % (rng, directory))

    if len(m.groups()) == 3:
        if m.group(3) == 'not checked out' and rng.startswith('0000000000..'):
            log.warning('Please run "git submodule update --init"')
            log.warning('and re-try.')
            raise SystemExit(1)
        if m.group(3) == 'new submodule':
            _, parent_commit = parent_range.split('..')
            return new_submodule(directory, parent_commit, rng)

    first, _ = parent_range.split('..')
    # To be able to stay on the dist-git branch:
    # (or having to run git submodule update $DIR):
    # 1. Parse `git show $FIRST:.gitmodules` with Python's ConfigParser
    # 2. Get the URL for $DIR and (bare?) clone it to a tmpdir
    # 3. `git format-patch ...` within that tmpdir clone
    # 4. profit
    show = git('show', first + ':.gitmodules')
    url = find_url(show, directory)
    tmpclonedir = tempfile.mkdtemp(suffix='.subpatch')
    git('clone', '--bare', url, tmpclonedir)
    origcwd = os.getcwd()

    # create a single .patch file from this tmp clone
    os.chdir(tmpclonedir)
    tmppatchdir = tempfile.mkdtemp(suffix='.subpatch')
    diff = git('diff', '--no-renames', '--ignore-submodules', rng)
    basename = os.path.basename(directory)
    patch_file = os.path.join(tmppatchdir, '%s.patch' % basename)
    with open(patch_file, 'w') as f:
        f.write(diff)

    print('')
    print('Insert the following lines into your .spec file:')
    print('')

    os.chdir(tmppatchdir)
    shutil.rmtree(tmpclonedir)
    sourcenum = 100
    print('With the other "SourceX" lines:')
    print('')
    for patch in sorted(glob('*.patch')):
        sourcenum += 1
        print('Source%i: %s' % (sourcenum, os.path.basename(patch)))

    print('')
    print('...and in the %prep section of your .spec file:')
    print('')
    print('# submodule patches must be handled separately')
    print('# https://github.com/redhat-openstack/rdopkg/issues/16')

    print('pushd %s' % directory)
    sourcenum = 100
    for patch in sorted(glob('*.patch')):
        sourcenum += 1
        print('  patch -p1 --fuzz=0 -i %%{SOURCE%i}' % sourcenum)
        shutil.move(patch, origcwd)
    print('popd')

    shutil.rmtree(tmppatchdir)


if __name__ == '__main__':
    main(sys.argv)
